// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->
    typedef struct {
        float array[784];
        long long unsigned int ndim;
        long long unsigned int numel;
        long long unsigned int shape[5];
       } k2c_tensor;



// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "input_5_input_array_0"
#define AUTOTB_TVIN_input_5_input_array_0  "../tv/cdatafile/c.c_mnist.autotvin_input_5_input_array_0.dat"
// wrapc file define: "input_5_input_array_1"
#define AUTOTB_TVIN_input_5_input_array_1  "../tv/cdatafile/c.c_mnist.autotvin_input_5_input_array_1.dat"
// wrapc file define: "input_5_input_array_2"
#define AUTOTB_TVIN_input_5_input_array_2  "../tv/cdatafile/c.c_mnist.autotvin_input_5_input_array_2.dat"
// wrapc file define: "input_5_input_array_3"
#define AUTOTB_TVIN_input_5_input_array_3  "../tv/cdatafile/c.c_mnist.autotvin_input_5_input_array_3.dat"
// wrapc file define: "input_5_input_array_4"
#define AUTOTB_TVIN_input_5_input_array_4  "../tv/cdatafile/c.c_mnist.autotvin_input_5_input_array_4.dat"
// wrapc file define: "input_5_input_array_5"
#define AUTOTB_TVIN_input_5_input_array_5  "../tv/cdatafile/c.c_mnist.autotvin_input_5_input_array_5.dat"
// wrapc file define: "input_5_input_array_6"
#define AUTOTB_TVIN_input_5_input_array_6  "../tv/cdatafile/c.c_mnist.autotvin_input_5_input_array_6.dat"
// wrapc file define: "input_5_input_array_7"
#define AUTOTB_TVIN_input_5_input_array_7  "../tv/cdatafile/c.c_mnist.autotvin_input_5_input_array_7.dat"
// wrapc file define: "input_5_input_array_8"
#define AUTOTB_TVIN_input_5_input_array_8  "../tv/cdatafile/c.c_mnist.autotvin_input_5_input_array_8.dat"
// wrapc file define: "input_5_input_array_9"
#define AUTOTB_TVIN_input_5_input_array_9  "../tv/cdatafile/c.c_mnist.autotvin_input_5_input_array_9.dat"
// wrapc file define: "input_5_input_array_10"
#define AUTOTB_TVIN_input_5_input_array_10  "../tv/cdatafile/c.c_mnist.autotvin_input_5_input_array_10.dat"
// wrapc file define: "input_5_input_array_11"
#define AUTOTB_TVIN_input_5_input_array_11  "../tv/cdatafile/c.c_mnist.autotvin_input_5_input_array_11.dat"
// wrapc file define: "input_5_input_array_12"
#define AUTOTB_TVIN_input_5_input_array_12  "../tv/cdatafile/c.c_mnist.autotvin_input_5_input_array_12.dat"
// wrapc file define: "input_5_input_array_13"
#define AUTOTB_TVIN_input_5_input_array_13  "../tv/cdatafile/c.c_mnist.autotvin_input_5_input_array_13.dat"
// wrapc file define: "input_5_input_array_14"
#define AUTOTB_TVIN_input_5_input_array_14  "../tv/cdatafile/c.c_mnist.autotvin_input_5_input_array_14.dat"
// wrapc file define: "input_5_input_array_15"
#define AUTOTB_TVIN_input_5_input_array_15  "../tv/cdatafile/c.c_mnist.autotvin_input_5_input_array_15.dat"
// wrapc file define: "input_5_input_numel"
#define AUTOTB_TVIN_input_5_input_numel  "../tv/cdatafile/c.c_mnist.autotvin_input_5_input_numel.dat"
// wrapc file define: "dense_8_output_array_0"
#define AUTOTB_TVIN_dense_8_output_array_0  "../tv/cdatafile/c.c_mnist.autotvin_dense_8_output_array_0.dat"
#define AUTOTB_TVOUT_dense_8_output_array_0  "../tv/cdatafile/c.c_mnist.autotvout_dense_8_output_array_0.dat"
// wrapc file define: "dense_8_output_array_1"
#define AUTOTB_TVIN_dense_8_output_array_1  "../tv/cdatafile/c.c_mnist.autotvin_dense_8_output_array_1.dat"
#define AUTOTB_TVOUT_dense_8_output_array_1  "../tv/cdatafile/c.c_mnist.autotvout_dense_8_output_array_1.dat"
// wrapc file define: "dense_8_output_array_2"
#define AUTOTB_TVIN_dense_8_output_array_2  "../tv/cdatafile/c.c_mnist.autotvin_dense_8_output_array_2.dat"
#define AUTOTB_TVOUT_dense_8_output_array_2  "../tv/cdatafile/c.c_mnist.autotvout_dense_8_output_array_2.dat"
// wrapc file define: "dense_8_output_array_3"
#define AUTOTB_TVIN_dense_8_output_array_3  "../tv/cdatafile/c.c_mnist.autotvin_dense_8_output_array_3.dat"
#define AUTOTB_TVOUT_dense_8_output_array_3  "../tv/cdatafile/c.c_mnist.autotvout_dense_8_output_array_3.dat"
// wrapc file define: "dense_8_output_array_4"
#define AUTOTB_TVIN_dense_8_output_array_4  "../tv/cdatafile/c.c_mnist.autotvin_dense_8_output_array_4.dat"
#define AUTOTB_TVOUT_dense_8_output_array_4  "../tv/cdatafile/c.c_mnist.autotvout_dense_8_output_array_4.dat"
// wrapc file define: "dense_8_output_array_5"
#define AUTOTB_TVIN_dense_8_output_array_5  "../tv/cdatafile/c.c_mnist.autotvin_dense_8_output_array_5.dat"
#define AUTOTB_TVOUT_dense_8_output_array_5  "../tv/cdatafile/c.c_mnist.autotvout_dense_8_output_array_5.dat"
// wrapc file define: "dense_8_output_array_6"
#define AUTOTB_TVIN_dense_8_output_array_6  "../tv/cdatafile/c.c_mnist.autotvin_dense_8_output_array_6.dat"
#define AUTOTB_TVOUT_dense_8_output_array_6  "../tv/cdatafile/c.c_mnist.autotvout_dense_8_output_array_6.dat"
// wrapc file define: "dense_8_output_array_7"
#define AUTOTB_TVIN_dense_8_output_array_7  "../tv/cdatafile/c.c_mnist.autotvin_dense_8_output_array_7.dat"
#define AUTOTB_TVOUT_dense_8_output_array_7  "../tv/cdatafile/c.c_mnist.autotvout_dense_8_output_array_7.dat"
// wrapc file define: "dense_8_output_array_8"
#define AUTOTB_TVIN_dense_8_output_array_8  "../tv/cdatafile/c.c_mnist.autotvin_dense_8_output_array_8.dat"
#define AUTOTB_TVOUT_dense_8_output_array_8  "../tv/cdatafile/c.c_mnist.autotvout_dense_8_output_array_8.dat"
// wrapc file define: "dense_8_output_array_9"
#define AUTOTB_TVIN_dense_8_output_array_9  "../tv/cdatafile/c.c_mnist.autotvin_dense_8_output_array_9.dat"
#define AUTOTB_TVOUT_dense_8_output_array_9  "../tv/cdatafile/c.c_mnist.autotvout_dense_8_output_array_9.dat"
// wrapc file define: "dense_8_output_array_10"
#define AUTOTB_TVIN_dense_8_output_array_10  "../tv/cdatafile/c.c_mnist.autotvin_dense_8_output_array_10.dat"
#define AUTOTB_TVOUT_dense_8_output_array_10  "../tv/cdatafile/c.c_mnist.autotvout_dense_8_output_array_10.dat"
// wrapc file define: "dense_8_output_array_11"
#define AUTOTB_TVIN_dense_8_output_array_11  "../tv/cdatafile/c.c_mnist.autotvin_dense_8_output_array_11.dat"
#define AUTOTB_TVOUT_dense_8_output_array_11  "../tv/cdatafile/c.c_mnist.autotvout_dense_8_output_array_11.dat"
// wrapc file define: "dense_8_output_array_12"
#define AUTOTB_TVIN_dense_8_output_array_12  "../tv/cdatafile/c.c_mnist.autotvin_dense_8_output_array_12.dat"
#define AUTOTB_TVOUT_dense_8_output_array_12  "../tv/cdatafile/c.c_mnist.autotvout_dense_8_output_array_12.dat"
// wrapc file define: "dense_8_output_array_13"
#define AUTOTB_TVIN_dense_8_output_array_13  "../tv/cdatafile/c.c_mnist.autotvin_dense_8_output_array_13.dat"
#define AUTOTB_TVOUT_dense_8_output_array_13  "../tv/cdatafile/c.c_mnist.autotvout_dense_8_output_array_13.dat"
// wrapc file define: "dense_8_output_array_14"
#define AUTOTB_TVIN_dense_8_output_array_14  "../tv/cdatafile/c.c_mnist.autotvin_dense_8_output_array_14.dat"
#define AUTOTB_TVOUT_dense_8_output_array_14  "../tv/cdatafile/c.c_mnist.autotvout_dense_8_output_array_14.dat"
// wrapc file define: "dense_8_output_array_15"
#define AUTOTB_TVIN_dense_8_output_array_15  "../tv/cdatafile/c.c_mnist.autotvin_dense_8_output_array_15.dat"
#define AUTOTB_TVOUT_dense_8_output_array_15  "../tv/cdatafile/c.c_mnist.autotvout_dense_8_output_array_15.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "dense_8_output_array_0"
#define AUTOTB_TVOUT_PC_dense_8_output_array_0  "../tv/rtldatafile/rtl.c_mnist.autotvout_dense_8_output_array_0.dat"
// tvout file define: "dense_8_output_array_1"
#define AUTOTB_TVOUT_PC_dense_8_output_array_1  "../tv/rtldatafile/rtl.c_mnist.autotvout_dense_8_output_array_1.dat"
// tvout file define: "dense_8_output_array_2"
#define AUTOTB_TVOUT_PC_dense_8_output_array_2  "../tv/rtldatafile/rtl.c_mnist.autotvout_dense_8_output_array_2.dat"
// tvout file define: "dense_8_output_array_3"
#define AUTOTB_TVOUT_PC_dense_8_output_array_3  "../tv/rtldatafile/rtl.c_mnist.autotvout_dense_8_output_array_3.dat"
// tvout file define: "dense_8_output_array_4"
#define AUTOTB_TVOUT_PC_dense_8_output_array_4  "../tv/rtldatafile/rtl.c_mnist.autotvout_dense_8_output_array_4.dat"
// tvout file define: "dense_8_output_array_5"
#define AUTOTB_TVOUT_PC_dense_8_output_array_5  "../tv/rtldatafile/rtl.c_mnist.autotvout_dense_8_output_array_5.dat"
// tvout file define: "dense_8_output_array_6"
#define AUTOTB_TVOUT_PC_dense_8_output_array_6  "../tv/rtldatafile/rtl.c_mnist.autotvout_dense_8_output_array_6.dat"
// tvout file define: "dense_8_output_array_7"
#define AUTOTB_TVOUT_PC_dense_8_output_array_7  "../tv/rtldatafile/rtl.c_mnist.autotvout_dense_8_output_array_7.dat"
// tvout file define: "dense_8_output_array_8"
#define AUTOTB_TVOUT_PC_dense_8_output_array_8  "../tv/rtldatafile/rtl.c_mnist.autotvout_dense_8_output_array_8.dat"
// tvout file define: "dense_8_output_array_9"
#define AUTOTB_TVOUT_PC_dense_8_output_array_9  "../tv/rtldatafile/rtl.c_mnist.autotvout_dense_8_output_array_9.dat"
// tvout file define: "dense_8_output_array_10"
#define AUTOTB_TVOUT_PC_dense_8_output_array_10  "../tv/rtldatafile/rtl.c_mnist.autotvout_dense_8_output_array_10.dat"
// tvout file define: "dense_8_output_array_11"
#define AUTOTB_TVOUT_PC_dense_8_output_array_11  "../tv/rtldatafile/rtl.c_mnist.autotvout_dense_8_output_array_11.dat"
// tvout file define: "dense_8_output_array_12"
#define AUTOTB_TVOUT_PC_dense_8_output_array_12  "../tv/rtldatafile/rtl.c_mnist.autotvout_dense_8_output_array_12.dat"
// tvout file define: "dense_8_output_array_13"
#define AUTOTB_TVOUT_PC_dense_8_output_array_13  "../tv/rtldatafile/rtl.c_mnist.autotvout_dense_8_output_array_13.dat"
// tvout file define: "dense_8_output_array_14"
#define AUTOTB_TVOUT_PC_dense_8_output_array_14  "../tv/rtldatafile/rtl.c_mnist.autotvout_dense_8_output_array_14.dat"
// tvout file define: "dense_8_output_array_15"
#define AUTOTB_TVOUT_PC_dense_8_output_array_15  "../tv/rtldatafile/rtl.c_mnist.autotvout_dense_8_output_array_15.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			input_5_input_array_0_depth = 0;
			input_5_input_array_1_depth = 0;
			input_5_input_array_2_depth = 0;
			input_5_input_array_3_depth = 0;
			input_5_input_array_4_depth = 0;
			input_5_input_array_5_depth = 0;
			input_5_input_array_6_depth = 0;
			input_5_input_array_7_depth = 0;
			input_5_input_array_8_depth = 0;
			input_5_input_array_9_depth = 0;
			input_5_input_array_10_depth = 0;
			input_5_input_array_11_depth = 0;
			input_5_input_array_12_depth = 0;
			input_5_input_array_13_depth = 0;
			input_5_input_array_14_depth = 0;
			input_5_input_array_15_depth = 0;
			input_5_input_numel_depth = 0;
			dense_8_output_array_0_depth = 0;
			dense_8_output_array_1_depth = 0;
			dense_8_output_array_2_depth = 0;
			dense_8_output_array_3_depth = 0;
			dense_8_output_array_4_depth = 0;
			dense_8_output_array_5_depth = 0;
			dense_8_output_array_6_depth = 0;
			dense_8_output_array_7_depth = 0;
			dense_8_output_array_8_depth = 0;
			dense_8_output_array_9_depth = 0;
			dense_8_output_array_10_depth = 0;
			dense_8_output_array_11_depth = 0;
			dense_8_output_array_12_depth = 0;
			dense_8_output_array_13_depth = 0;
			dense_8_output_array_14_depth = 0;
			dense_8_output_array_15_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{input_5_input_array_0 " << input_5_input_array_0_depth << "}\n";
			total_list << "{input_5_input_array_1 " << input_5_input_array_1_depth << "}\n";
			total_list << "{input_5_input_array_2 " << input_5_input_array_2_depth << "}\n";
			total_list << "{input_5_input_array_3 " << input_5_input_array_3_depth << "}\n";
			total_list << "{input_5_input_array_4 " << input_5_input_array_4_depth << "}\n";
			total_list << "{input_5_input_array_5 " << input_5_input_array_5_depth << "}\n";
			total_list << "{input_5_input_array_6 " << input_5_input_array_6_depth << "}\n";
			total_list << "{input_5_input_array_7 " << input_5_input_array_7_depth << "}\n";
			total_list << "{input_5_input_array_8 " << input_5_input_array_8_depth << "}\n";
			total_list << "{input_5_input_array_9 " << input_5_input_array_9_depth << "}\n";
			total_list << "{input_5_input_array_10 " << input_5_input_array_10_depth << "}\n";
			total_list << "{input_5_input_array_11 " << input_5_input_array_11_depth << "}\n";
			total_list << "{input_5_input_array_12 " << input_5_input_array_12_depth << "}\n";
			total_list << "{input_5_input_array_13 " << input_5_input_array_13_depth << "}\n";
			total_list << "{input_5_input_array_14 " << input_5_input_array_14_depth << "}\n";
			total_list << "{input_5_input_array_15 " << input_5_input_array_15_depth << "}\n";
			total_list << "{input_5_input_numel " << input_5_input_numel_depth << "}\n";
			total_list << "{dense_8_output_array_0 " << dense_8_output_array_0_depth << "}\n";
			total_list << "{dense_8_output_array_1 " << dense_8_output_array_1_depth << "}\n";
			total_list << "{dense_8_output_array_2 " << dense_8_output_array_2_depth << "}\n";
			total_list << "{dense_8_output_array_3 " << dense_8_output_array_3_depth << "}\n";
			total_list << "{dense_8_output_array_4 " << dense_8_output_array_4_depth << "}\n";
			total_list << "{dense_8_output_array_5 " << dense_8_output_array_5_depth << "}\n";
			total_list << "{dense_8_output_array_6 " << dense_8_output_array_6_depth << "}\n";
			total_list << "{dense_8_output_array_7 " << dense_8_output_array_7_depth << "}\n";
			total_list << "{dense_8_output_array_8 " << dense_8_output_array_8_depth << "}\n";
			total_list << "{dense_8_output_array_9 " << dense_8_output_array_9_depth << "}\n";
			total_list << "{dense_8_output_array_10 " << dense_8_output_array_10_depth << "}\n";
			total_list << "{dense_8_output_array_11 " << dense_8_output_array_11_depth << "}\n";
			total_list << "{dense_8_output_array_12 " << dense_8_output_array_12_depth << "}\n";
			total_list << "{dense_8_output_array_13 " << dense_8_output_array_13_depth << "}\n";
			total_list << "{dense_8_output_array_14 " << dense_8_output_array_14_depth << "}\n";
			total_list << "{dense_8_output_array_15 " << dense_8_output_array_15_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int input_5_input_array_0_depth;
		int input_5_input_array_1_depth;
		int input_5_input_array_2_depth;
		int input_5_input_array_3_depth;
		int input_5_input_array_4_depth;
		int input_5_input_array_5_depth;
		int input_5_input_array_6_depth;
		int input_5_input_array_7_depth;
		int input_5_input_array_8_depth;
		int input_5_input_array_9_depth;
		int input_5_input_array_10_depth;
		int input_5_input_array_11_depth;
		int input_5_input_array_12_depth;
		int input_5_input_array_13_depth;
		int input_5_input_array_14_depth;
		int input_5_input_array_15_depth;
		int input_5_input_numel_depth;
		int dense_8_output_array_0_depth;
		int dense_8_output_array_1_depth;
		int dense_8_output_array_2_depth;
		int dense_8_output_array_3_depth;
		int dense_8_output_array_4_depth;
		int dense_8_output_array_5_depth;
		int dense_8_output_array_6_depth;
		int dense_8_output_array_7_depth;
		int dense_8_output_array_8_depth;
		int dense_8_output_array_9_depth;
		int dense_8_output_array_10_depth;
		int dense_8_output_array_11_depth;
		int dense_8_output_array_12_depth;
		int dense_8_output_array_13_depth;
		int dense_8_output_array_14_depth;
		int dense_8_output_array_15_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern "C" void c_mnist (
k2c_tensor* input_5_input,
k2c_tensor* dense_8_output);

extern "C" void AESL_WRAP_c_mnist (
k2c_tensor* input_5_input,
k2c_tensor* dense_8_output)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "dense_8_output_array_0"
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_0, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_0, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_0, AESL_token); // data

			sc_bv<32> *dense_8_output_array_0_pc_buffer = new sc_bv<32>[49];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_0', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_0', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dense_8_output_array_0_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_0, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dense_8_output_array_0))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dense_8_output_array_0
				{
					// bitslice(31, 0)
					// {
						// celement: dense_8_output.array(31, 0)
						// {
							sc_lv<32>* dense_8_output_array_lv0_0_768_16 = new sc_lv<32>[49];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (0) => (768) @ (16)
							for (int i_0 = 0; i_0 <= 768; i_0 += 16)
							{
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									dense_8_output_array_lv0_0_768_16[hls_map_index].range(31, 0) = sc_bv<32>(dense_8_output_array_0_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (0) => (768) @ (16)
							for (int i_0 = 0; i_0 <= 768; i_0 += 16)
							{
								// sub                    : i_0
								// ori_name               : dense_8_output->array[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : dense_8_output->array[0]
								// output_left_conversion : *(int*)&dense_8_output->array[i_0]
								// output_type_conversion : (dense_8_output_array_lv0_0_768_16[hls_map_index]).to_uint64()
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&dense_8_output->array[i_0] = (dense_8_output_array_lv0_0_768_16[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dense_8_output_array_0_pc_buffer;
		}

		// output port post check: "dense_8_output_array_1"
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_1, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_1, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_1, AESL_token); // data

			sc_bv<32> *dense_8_output_array_1_pc_buffer = new sc_bv<32>[49];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_1', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_1', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dense_8_output_array_1_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_1, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dense_8_output_array_1))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dense_8_output_array_1
				{
					// bitslice(31, 0)
					// {
						// celement: dense_8_output.array(31, 0)
						// {
							sc_lv<32>* dense_8_output_array_lv0_1_769_16 = new sc_lv<32>[49];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (1) => (769) @ (16)
							for (int i_0 = 1; i_0 <= 769; i_0 += 16)
							{
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									dense_8_output_array_lv0_1_769_16[hls_map_index].range(31, 0) = sc_bv<32>(dense_8_output_array_1_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (1) => (769) @ (16)
							for (int i_0 = 1; i_0 <= 769; i_0 += 16)
							{
								// sub                    : i_0
								// ori_name               : dense_8_output->array[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : dense_8_output->array[0]
								// output_left_conversion : *(int*)&dense_8_output->array[i_0]
								// output_type_conversion : (dense_8_output_array_lv0_1_769_16[hls_map_index]).to_uint64()
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&dense_8_output->array[i_0] = (dense_8_output_array_lv0_1_769_16[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dense_8_output_array_1_pc_buffer;
		}

		// output port post check: "dense_8_output_array_2"
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_2, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_2, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_2, AESL_token); // data

			sc_bv<32> *dense_8_output_array_2_pc_buffer = new sc_bv<32>[49];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_2', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_2', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dense_8_output_array_2_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_2, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dense_8_output_array_2))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dense_8_output_array_2
				{
					// bitslice(31, 0)
					// {
						// celement: dense_8_output.array(31, 0)
						// {
							sc_lv<32>* dense_8_output_array_lv0_2_770_16 = new sc_lv<32>[49];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (2) => (770) @ (16)
							for (int i_0 = 2; i_0 <= 770; i_0 += 16)
							{
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									dense_8_output_array_lv0_2_770_16[hls_map_index].range(31, 0) = sc_bv<32>(dense_8_output_array_2_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (2) => (770) @ (16)
							for (int i_0 = 2; i_0 <= 770; i_0 += 16)
							{
								// sub                    : i_0
								// ori_name               : dense_8_output->array[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : dense_8_output->array[0]
								// output_left_conversion : *(int*)&dense_8_output->array[i_0]
								// output_type_conversion : (dense_8_output_array_lv0_2_770_16[hls_map_index]).to_uint64()
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&dense_8_output->array[i_0] = (dense_8_output_array_lv0_2_770_16[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dense_8_output_array_2_pc_buffer;
		}

		// output port post check: "dense_8_output_array_3"
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_3, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_3, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_3, AESL_token); // data

			sc_bv<32> *dense_8_output_array_3_pc_buffer = new sc_bv<32>[49];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_3', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_3', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dense_8_output_array_3_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_3, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dense_8_output_array_3))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dense_8_output_array_3
				{
					// bitslice(31, 0)
					// {
						// celement: dense_8_output.array(31, 0)
						// {
							sc_lv<32>* dense_8_output_array_lv0_3_771_16 = new sc_lv<32>[49];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (3) => (771) @ (16)
							for (int i_0 = 3; i_0 <= 771; i_0 += 16)
							{
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									dense_8_output_array_lv0_3_771_16[hls_map_index].range(31, 0) = sc_bv<32>(dense_8_output_array_3_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (3) => (771) @ (16)
							for (int i_0 = 3; i_0 <= 771; i_0 += 16)
							{
								// sub                    : i_0
								// ori_name               : dense_8_output->array[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : dense_8_output->array[0]
								// output_left_conversion : *(int*)&dense_8_output->array[i_0]
								// output_type_conversion : (dense_8_output_array_lv0_3_771_16[hls_map_index]).to_uint64()
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&dense_8_output->array[i_0] = (dense_8_output_array_lv0_3_771_16[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dense_8_output_array_3_pc_buffer;
		}

		// output port post check: "dense_8_output_array_4"
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_4, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_4, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_4, AESL_token); // data

			sc_bv<32> *dense_8_output_array_4_pc_buffer = new sc_bv<32>[49];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_4', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_4', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dense_8_output_array_4_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_4, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dense_8_output_array_4))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dense_8_output_array_4
				{
					// bitslice(31, 0)
					// {
						// celement: dense_8_output.array(31, 0)
						// {
							sc_lv<32>* dense_8_output_array_lv0_4_772_16 = new sc_lv<32>[49];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (4) => (772) @ (16)
							for (int i_0 = 4; i_0 <= 772; i_0 += 16)
							{
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									dense_8_output_array_lv0_4_772_16[hls_map_index].range(31, 0) = sc_bv<32>(dense_8_output_array_4_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (4) => (772) @ (16)
							for (int i_0 = 4; i_0 <= 772; i_0 += 16)
							{
								// sub                    : i_0
								// ori_name               : dense_8_output->array[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : dense_8_output->array[0]
								// output_left_conversion : *(int*)&dense_8_output->array[i_0]
								// output_type_conversion : (dense_8_output_array_lv0_4_772_16[hls_map_index]).to_uint64()
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&dense_8_output->array[i_0] = (dense_8_output_array_lv0_4_772_16[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dense_8_output_array_4_pc_buffer;
		}

		// output port post check: "dense_8_output_array_5"
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_5, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_5, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_5, AESL_token); // data

			sc_bv<32> *dense_8_output_array_5_pc_buffer = new sc_bv<32>[49];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_5', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_5', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dense_8_output_array_5_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_5, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dense_8_output_array_5))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dense_8_output_array_5
				{
					// bitslice(31, 0)
					// {
						// celement: dense_8_output.array(31, 0)
						// {
							sc_lv<32>* dense_8_output_array_lv0_5_773_16 = new sc_lv<32>[49];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (5) => (773) @ (16)
							for (int i_0 = 5; i_0 <= 773; i_0 += 16)
							{
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									dense_8_output_array_lv0_5_773_16[hls_map_index].range(31, 0) = sc_bv<32>(dense_8_output_array_5_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (5) => (773) @ (16)
							for (int i_0 = 5; i_0 <= 773; i_0 += 16)
							{
								// sub                    : i_0
								// ori_name               : dense_8_output->array[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : dense_8_output->array[0]
								// output_left_conversion : *(int*)&dense_8_output->array[i_0]
								// output_type_conversion : (dense_8_output_array_lv0_5_773_16[hls_map_index]).to_uint64()
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&dense_8_output->array[i_0] = (dense_8_output_array_lv0_5_773_16[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dense_8_output_array_5_pc_buffer;
		}

		// output port post check: "dense_8_output_array_6"
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_6, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_6, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_6, AESL_token); // data

			sc_bv<32> *dense_8_output_array_6_pc_buffer = new sc_bv<32>[49];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_6', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_6', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dense_8_output_array_6_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_6, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dense_8_output_array_6))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dense_8_output_array_6
				{
					// bitslice(31, 0)
					// {
						// celement: dense_8_output.array(31, 0)
						// {
							sc_lv<32>* dense_8_output_array_lv0_6_774_16 = new sc_lv<32>[49];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (6) => (774) @ (16)
							for (int i_0 = 6; i_0 <= 774; i_0 += 16)
							{
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									dense_8_output_array_lv0_6_774_16[hls_map_index].range(31, 0) = sc_bv<32>(dense_8_output_array_6_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (6) => (774) @ (16)
							for (int i_0 = 6; i_0 <= 774; i_0 += 16)
							{
								// sub                    : i_0
								// ori_name               : dense_8_output->array[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : dense_8_output->array[0]
								// output_left_conversion : *(int*)&dense_8_output->array[i_0]
								// output_type_conversion : (dense_8_output_array_lv0_6_774_16[hls_map_index]).to_uint64()
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&dense_8_output->array[i_0] = (dense_8_output_array_lv0_6_774_16[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dense_8_output_array_6_pc_buffer;
		}

		// output port post check: "dense_8_output_array_7"
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_7, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_7, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_7, AESL_token); // data

			sc_bv<32> *dense_8_output_array_7_pc_buffer = new sc_bv<32>[49];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_7', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_7', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dense_8_output_array_7_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_7, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dense_8_output_array_7))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dense_8_output_array_7
				{
					// bitslice(31, 0)
					// {
						// celement: dense_8_output.array(31, 0)
						// {
							sc_lv<32>* dense_8_output_array_lv0_7_775_16 = new sc_lv<32>[49];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (7) => (775) @ (16)
							for (int i_0 = 7; i_0 <= 775; i_0 += 16)
							{
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									dense_8_output_array_lv0_7_775_16[hls_map_index].range(31, 0) = sc_bv<32>(dense_8_output_array_7_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (7) => (775) @ (16)
							for (int i_0 = 7; i_0 <= 775; i_0 += 16)
							{
								// sub                    : i_0
								// ori_name               : dense_8_output->array[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : dense_8_output->array[0]
								// output_left_conversion : *(int*)&dense_8_output->array[i_0]
								// output_type_conversion : (dense_8_output_array_lv0_7_775_16[hls_map_index]).to_uint64()
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&dense_8_output->array[i_0] = (dense_8_output_array_lv0_7_775_16[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dense_8_output_array_7_pc_buffer;
		}

		// output port post check: "dense_8_output_array_8"
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_8, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_8, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_8, AESL_token); // data

			sc_bv<32> *dense_8_output_array_8_pc_buffer = new sc_bv<32>[49];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_8', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_8', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dense_8_output_array_8_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_8, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dense_8_output_array_8))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dense_8_output_array_8
				{
					// bitslice(31, 0)
					// {
						// celement: dense_8_output.array(31, 0)
						// {
							sc_lv<32>* dense_8_output_array_lv0_8_776_16 = new sc_lv<32>[49];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (8) => (776) @ (16)
							for (int i_0 = 8; i_0 <= 776; i_0 += 16)
							{
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									dense_8_output_array_lv0_8_776_16[hls_map_index].range(31, 0) = sc_bv<32>(dense_8_output_array_8_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (8) => (776) @ (16)
							for (int i_0 = 8; i_0 <= 776; i_0 += 16)
							{
								// sub                    : i_0
								// ori_name               : dense_8_output->array[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : dense_8_output->array[0]
								// output_left_conversion : *(int*)&dense_8_output->array[i_0]
								// output_type_conversion : (dense_8_output_array_lv0_8_776_16[hls_map_index]).to_uint64()
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&dense_8_output->array[i_0] = (dense_8_output_array_lv0_8_776_16[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dense_8_output_array_8_pc_buffer;
		}

		// output port post check: "dense_8_output_array_9"
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_9, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_9, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_9, AESL_token); // data

			sc_bv<32> *dense_8_output_array_9_pc_buffer = new sc_bv<32>[49];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_9', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_9', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dense_8_output_array_9_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_9, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dense_8_output_array_9))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dense_8_output_array_9
				{
					// bitslice(31, 0)
					// {
						// celement: dense_8_output.array(31, 0)
						// {
							sc_lv<32>* dense_8_output_array_lv0_9_777_16 = new sc_lv<32>[49];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (9) => (777) @ (16)
							for (int i_0 = 9; i_0 <= 777; i_0 += 16)
							{
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									dense_8_output_array_lv0_9_777_16[hls_map_index].range(31, 0) = sc_bv<32>(dense_8_output_array_9_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (9) => (777) @ (16)
							for (int i_0 = 9; i_0 <= 777; i_0 += 16)
							{
								// sub                    : i_0
								// ori_name               : dense_8_output->array[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : dense_8_output->array[0]
								// output_left_conversion : *(int*)&dense_8_output->array[i_0]
								// output_type_conversion : (dense_8_output_array_lv0_9_777_16[hls_map_index]).to_uint64()
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&dense_8_output->array[i_0] = (dense_8_output_array_lv0_9_777_16[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dense_8_output_array_9_pc_buffer;
		}

		// output port post check: "dense_8_output_array_10"
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_10, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_10, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_10, AESL_token); // data

			sc_bv<32> *dense_8_output_array_10_pc_buffer = new sc_bv<32>[49];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_10', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_10', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dense_8_output_array_10_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_10, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dense_8_output_array_10))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dense_8_output_array_10
				{
					// bitslice(31, 0)
					// {
						// celement: dense_8_output.array(31, 0)
						// {
							sc_lv<32>* dense_8_output_array_lv0_10_778_16 = new sc_lv<32>[49];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (10) => (778) @ (16)
							for (int i_0 = 10; i_0 <= 778; i_0 += 16)
							{
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									dense_8_output_array_lv0_10_778_16[hls_map_index].range(31, 0) = sc_bv<32>(dense_8_output_array_10_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (10) => (778) @ (16)
							for (int i_0 = 10; i_0 <= 778; i_0 += 16)
							{
								// sub                    : i_0
								// ori_name               : dense_8_output->array[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : dense_8_output->array[0]
								// output_left_conversion : *(int*)&dense_8_output->array[i_0]
								// output_type_conversion : (dense_8_output_array_lv0_10_778_16[hls_map_index]).to_uint64()
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&dense_8_output->array[i_0] = (dense_8_output_array_lv0_10_778_16[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dense_8_output_array_10_pc_buffer;
		}

		// output port post check: "dense_8_output_array_11"
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_11, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_11, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_11, AESL_token); // data

			sc_bv<32> *dense_8_output_array_11_pc_buffer = new sc_bv<32>[49];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_11', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_11', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dense_8_output_array_11_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_11, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dense_8_output_array_11))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dense_8_output_array_11
				{
					// bitslice(31, 0)
					// {
						// celement: dense_8_output.array(31, 0)
						// {
							sc_lv<32>* dense_8_output_array_lv0_11_779_16 = new sc_lv<32>[49];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (11) => (779) @ (16)
							for (int i_0 = 11; i_0 <= 779; i_0 += 16)
							{
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									dense_8_output_array_lv0_11_779_16[hls_map_index].range(31, 0) = sc_bv<32>(dense_8_output_array_11_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (11) => (779) @ (16)
							for (int i_0 = 11; i_0 <= 779; i_0 += 16)
							{
								// sub                    : i_0
								// ori_name               : dense_8_output->array[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : dense_8_output->array[0]
								// output_left_conversion : *(int*)&dense_8_output->array[i_0]
								// output_type_conversion : (dense_8_output_array_lv0_11_779_16[hls_map_index]).to_uint64()
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&dense_8_output->array[i_0] = (dense_8_output_array_lv0_11_779_16[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dense_8_output_array_11_pc_buffer;
		}

		// output port post check: "dense_8_output_array_12"
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_12, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_12, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_12, AESL_token); // data

			sc_bv<32> *dense_8_output_array_12_pc_buffer = new sc_bv<32>[49];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_12', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_12', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dense_8_output_array_12_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_12, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dense_8_output_array_12))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dense_8_output_array_12
				{
					// bitslice(31, 0)
					// {
						// celement: dense_8_output.array(31, 0)
						// {
							sc_lv<32>* dense_8_output_array_lv0_12_780_16 = new sc_lv<32>[49];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (12) => (780) @ (16)
							for (int i_0 = 12; i_0 <= 780; i_0 += 16)
							{
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									dense_8_output_array_lv0_12_780_16[hls_map_index].range(31, 0) = sc_bv<32>(dense_8_output_array_12_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (12) => (780) @ (16)
							for (int i_0 = 12; i_0 <= 780; i_0 += 16)
							{
								// sub                    : i_0
								// ori_name               : dense_8_output->array[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : dense_8_output->array[0]
								// output_left_conversion : *(int*)&dense_8_output->array[i_0]
								// output_type_conversion : (dense_8_output_array_lv0_12_780_16[hls_map_index]).to_uint64()
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&dense_8_output->array[i_0] = (dense_8_output_array_lv0_12_780_16[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dense_8_output_array_12_pc_buffer;
		}

		// output port post check: "dense_8_output_array_13"
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_13, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_13, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_13, AESL_token); // data

			sc_bv<32> *dense_8_output_array_13_pc_buffer = new sc_bv<32>[49];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_13', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_13', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dense_8_output_array_13_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_13, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dense_8_output_array_13))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dense_8_output_array_13
				{
					// bitslice(31, 0)
					// {
						// celement: dense_8_output.array(31, 0)
						// {
							sc_lv<32>* dense_8_output_array_lv0_13_781_16 = new sc_lv<32>[49];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (13) => (781) @ (16)
							for (int i_0 = 13; i_0 <= 781; i_0 += 16)
							{
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									dense_8_output_array_lv0_13_781_16[hls_map_index].range(31, 0) = sc_bv<32>(dense_8_output_array_13_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (13) => (781) @ (16)
							for (int i_0 = 13; i_0 <= 781; i_0 += 16)
							{
								// sub                    : i_0
								// ori_name               : dense_8_output->array[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : dense_8_output->array[0]
								// output_left_conversion : *(int*)&dense_8_output->array[i_0]
								// output_type_conversion : (dense_8_output_array_lv0_13_781_16[hls_map_index]).to_uint64()
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&dense_8_output->array[i_0] = (dense_8_output_array_lv0_13_781_16[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dense_8_output_array_13_pc_buffer;
		}

		// output port post check: "dense_8_output_array_14"
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_14, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_14, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_14, AESL_token); // data

			sc_bv<32> *dense_8_output_array_14_pc_buffer = new sc_bv<32>[49];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_14', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_14', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dense_8_output_array_14_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_14, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dense_8_output_array_14))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dense_8_output_array_14
				{
					// bitslice(31, 0)
					// {
						// celement: dense_8_output.array(31, 0)
						// {
							sc_lv<32>* dense_8_output_array_lv0_14_782_16 = new sc_lv<32>[49];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (14) => (782) @ (16)
							for (int i_0 = 14; i_0 <= 782; i_0 += 16)
							{
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									dense_8_output_array_lv0_14_782_16[hls_map_index].range(31, 0) = sc_bv<32>(dense_8_output_array_14_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (14) => (782) @ (16)
							for (int i_0 = 14; i_0 <= 782; i_0 += 16)
							{
								// sub                    : i_0
								// ori_name               : dense_8_output->array[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : dense_8_output->array[0]
								// output_left_conversion : *(int*)&dense_8_output->array[i_0]
								// output_type_conversion : (dense_8_output_array_lv0_14_782_16[hls_map_index]).to_uint64()
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&dense_8_output->array[i_0] = (dense_8_output_array_lv0_14_782_16[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dense_8_output_array_14_pc_buffer;
		}

		// output port post check: "dense_8_output_array_15"
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_15, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_15, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_15, AESL_token); // data

			sc_bv<32> *dense_8_output_array_15_pc_buffer = new sc_bv<32>[49];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_15', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_8_output_array_15', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dense_8_output_array_15_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dense_8_output_array_15, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dense_8_output_array_15))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dense_8_output_array_15
				{
					// bitslice(31, 0)
					// {
						// celement: dense_8_output.array(31, 0)
						// {
							sc_lv<32>* dense_8_output_array_lv0_15_783_16 = new sc_lv<32>[49];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (15) => (783) @ (16)
							for (int i_0 = 15; i_0 <= 783; i_0 += 16)
							{
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									dense_8_output_array_lv0_15_783_16[hls_map_index].range(31, 0) = sc_bv<32>(dense_8_output_array_15_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_8_output.array(31, 0)
						{
							// carray: (15) => (783) @ (16)
							for (int i_0 = 15; i_0 <= 783; i_0 += 16)
							{
								// sub                    : i_0
								// ori_name               : dense_8_output->array[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : dense_8_output->array[0]
								// output_left_conversion : *(int*)&dense_8_output->array[i_0]
								// output_type_conversion : (dense_8_output_array_lv0_15_783_16[hls_map_index]).to_uint64()
								if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&dense_8_output->array[i_0] = (dense_8_output_array_lv0_15_783_16[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dense_8_output_array_15_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "input_5_input_array_0"
		char* tvin_input_5_input_array_0 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_5_input_array_0);

		// "input_5_input_array_1"
		char* tvin_input_5_input_array_1 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_5_input_array_1);

		// "input_5_input_array_2"
		char* tvin_input_5_input_array_2 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_5_input_array_2);

		// "input_5_input_array_3"
		char* tvin_input_5_input_array_3 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_5_input_array_3);

		// "input_5_input_array_4"
		char* tvin_input_5_input_array_4 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_5_input_array_4);

		// "input_5_input_array_5"
		char* tvin_input_5_input_array_5 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_5_input_array_5);

		// "input_5_input_array_6"
		char* tvin_input_5_input_array_6 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_5_input_array_6);

		// "input_5_input_array_7"
		char* tvin_input_5_input_array_7 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_5_input_array_7);

		// "input_5_input_array_8"
		char* tvin_input_5_input_array_8 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_5_input_array_8);

		// "input_5_input_array_9"
		char* tvin_input_5_input_array_9 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_5_input_array_9);

		// "input_5_input_array_10"
		char* tvin_input_5_input_array_10 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_5_input_array_10);

		// "input_5_input_array_11"
		char* tvin_input_5_input_array_11 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_5_input_array_11);

		// "input_5_input_array_12"
		char* tvin_input_5_input_array_12 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_5_input_array_12);

		// "input_5_input_array_13"
		char* tvin_input_5_input_array_13 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_5_input_array_13);

		// "input_5_input_array_14"
		char* tvin_input_5_input_array_14 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_5_input_array_14);

		// "input_5_input_array_15"
		char* tvin_input_5_input_array_15 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_5_input_array_15);

		// "input_5_input_numel"
		char* tvin_input_5_input_numel = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_5_input_numel);

		// "dense_8_output_array_0"
		char* tvin_dense_8_output_array_0 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_8_output_array_0);
		char* tvout_dense_8_output_array_0 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dense_8_output_array_0);

		// "dense_8_output_array_1"
		char* tvin_dense_8_output_array_1 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_8_output_array_1);
		char* tvout_dense_8_output_array_1 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dense_8_output_array_1);

		// "dense_8_output_array_2"
		char* tvin_dense_8_output_array_2 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_8_output_array_2);
		char* tvout_dense_8_output_array_2 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dense_8_output_array_2);

		// "dense_8_output_array_3"
		char* tvin_dense_8_output_array_3 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_8_output_array_3);
		char* tvout_dense_8_output_array_3 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dense_8_output_array_3);

		// "dense_8_output_array_4"
		char* tvin_dense_8_output_array_4 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_8_output_array_4);
		char* tvout_dense_8_output_array_4 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dense_8_output_array_4);

		// "dense_8_output_array_5"
		char* tvin_dense_8_output_array_5 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_8_output_array_5);
		char* tvout_dense_8_output_array_5 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dense_8_output_array_5);

		// "dense_8_output_array_6"
		char* tvin_dense_8_output_array_6 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_8_output_array_6);
		char* tvout_dense_8_output_array_6 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dense_8_output_array_6);

		// "dense_8_output_array_7"
		char* tvin_dense_8_output_array_7 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_8_output_array_7);
		char* tvout_dense_8_output_array_7 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dense_8_output_array_7);

		// "dense_8_output_array_8"
		char* tvin_dense_8_output_array_8 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_8_output_array_8);
		char* tvout_dense_8_output_array_8 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dense_8_output_array_8);

		// "dense_8_output_array_9"
		char* tvin_dense_8_output_array_9 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_8_output_array_9);
		char* tvout_dense_8_output_array_9 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dense_8_output_array_9);

		// "dense_8_output_array_10"
		char* tvin_dense_8_output_array_10 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_8_output_array_10);
		char* tvout_dense_8_output_array_10 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dense_8_output_array_10);

		// "dense_8_output_array_11"
		char* tvin_dense_8_output_array_11 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_8_output_array_11);
		char* tvout_dense_8_output_array_11 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dense_8_output_array_11);

		// "dense_8_output_array_12"
		char* tvin_dense_8_output_array_12 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_8_output_array_12);
		char* tvout_dense_8_output_array_12 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dense_8_output_array_12);

		// "dense_8_output_array_13"
		char* tvin_dense_8_output_array_13 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_8_output_array_13);
		char* tvout_dense_8_output_array_13 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dense_8_output_array_13);

		// "dense_8_output_array_14"
		char* tvin_dense_8_output_array_14 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_8_output_array_14);
		char* tvout_dense_8_output_array_14 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dense_8_output_array_14);

		// "dense_8_output_array_15"
		char* tvin_dense_8_output_array_15 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_8_output_array_15);
		char* tvout_dense_8_output_array_15 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dense_8_output_array_15);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_input_5_input_array_0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_0, tvin_input_5_input_array_0);

		sc_bv<32>* input_5_input_array_0_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: input_5_input_array_0
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input_5_input.array(31, 0)
				{
					// carray: (0) => (768) @ (16)
					for (int i_0 = 0; i_0 <= 768; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : input_5_input->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_5_input->array[0]
						// regulate_c_name       : input_5_input_array
						// input_type_conversion : *(int*)&input_5_input->array[i_0]
						if (&(input_5_input->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_5_input_array_tmp_mem;
							input_5_input_array_tmp_mem = *(int*)&input_5_input->array[i_0];
							input_5_input_array_0_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_5_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_input_5_input_array_0, "%s\n", (input_5_input_array_0_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_5_input_array_0, tvin_input_5_input_array_0);
		}

		tcl_file.set_num(49, &tcl_file.input_5_input_array_0_depth);
		sprintf(tvin_input_5_input_array_0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_0, tvin_input_5_input_array_0);

		// release memory allocation
		delete [] input_5_input_array_0_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_5_input_array_1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_1, tvin_input_5_input_array_1);

		sc_bv<32>* input_5_input_array_1_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: input_5_input_array_1
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input_5_input.array(31, 0)
				{
					// carray: (1) => (769) @ (16)
					for (int i_0 = 1; i_0 <= 769; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : input_5_input->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_5_input->array[0]
						// regulate_c_name       : input_5_input_array
						// input_type_conversion : *(int*)&input_5_input->array[i_0]
						if (&(input_5_input->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_5_input_array_tmp_mem;
							input_5_input_array_tmp_mem = *(int*)&input_5_input->array[i_0];
							input_5_input_array_1_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_5_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_input_5_input_array_1, "%s\n", (input_5_input_array_1_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_5_input_array_1, tvin_input_5_input_array_1);
		}

		tcl_file.set_num(49, &tcl_file.input_5_input_array_1_depth);
		sprintf(tvin_input_5_input_array_1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_1, tvin_input_5_input_array_1);

		// release memory allocation
		delete [] input_5_input_array_1_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_5_input_array_2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_2, tvin_input_5_input_array_2);

		sc_bv<32>* input_5_input_array_2_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: input_5_input_array_2
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input_5_input.array(31, 0)
				{
					// carray: (2) => (770) @ (16)
					for (int i_0 = 2; i_0 <= 770; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : input_5_input->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_5_input->array[0]
						// regulate_c_name       : input_5_input_array
						// input_type_conversion : *(int*)&input_5_input->array[i_0]
						if (&(input_5_input->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_5_input_array_tmp_mem;
							input_5_input_array_tmp_mem = *(int*)&input_5_input->array[i_0];
							input_5_input_array_2_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_5_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_input_5_input_array_2, "%s\n", (input_5_input_array_2_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_5_input_array_2, tvin_input_5_input_array_2);
		}

		tcl_file.set_num(49, &tcl_file.input_5_input_array_2_depth);
		sprintf(tvin_input_5_input_array_2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_2, tvin_input_5_input_array_2);

		// release memory allocation
		delete [] input_5_input_array_2_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_5_input_array_3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_3, tvin_input_5_input_array_3);

		sc_bv<32>* input_5_input_array_3_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: input_5_input_array_3
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input_5_input.array(31, 0)
				{
					// carray: (3) => (771) @ (16)
					for (int i_0 = 3; i_0 <= 771; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : input_5_input->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_5_input->array[0]
						// regulate_c_name       : input_5_input_array
						// input_type_conversion : *(int*)&input_5_input->array[i_0]
						if (&(input_5_input->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_5_input_array_tmp_mem;
							input_5_input_array_tmp_mem = *(int*)&input_5_input->array[i_0];
							input_5_input_array_3_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_5_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_input_5_input_array_3, "%s\n", (input_5_input_array_3_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_5_input_array_3, tvin_input_5_input_array_3);
		}

		tcl_file.set_num(49, &tcl_file.input_5_input_array_3_depth);
		sprintf(tvin_input_5_input_array_3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_3, tvin_input_5_input_array_3);

		// release memory allocation
		delete [] input_5_input_array_3_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_5_input_array_4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_4, tvin_input_5_input_array_4);

		sc_bv<32>* input_5_input_array_4_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: input_5_input_array_4
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input_5_input.array(31, 0)
				{
					// carray: (4) => (772) @ (16)
					for (int i_0 = 4; i_0 <= 772; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : input_5_input->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_5_input->array[0]
						// regulate_c_name       : input_5_input_array
						// input_type_conversion : *(int*)&input_5_input->array[i_0]
						if (&(input_5_input->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_5_input_array_tmp_mem;
							input_5_input_array_tmp_mem = *(int*)&input_5_input->array[i_0];
							input_5_input_array_4_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_5_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_input_5_input_array_4, "%s\n", (input_5_input_array_4_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_5_input_array_4, tvin_input_5_input_array_4);
		}

		tcl_file.set_num(49, &tcl_file.input_5_input_array_4_depth);
		sprintf(tvin_input_5_input_array_4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_4, tvin_input_5_input_array_4);

		// release memory allocation
		delete [] input_5_input_array_4_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_5_input_array_5, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_5, tvin_input_5_input_array_5);

		sc_bv<32>* input_5_input_array_5_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: input_5_input_array_5
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input_5_input.array(31, 0)
				{
					// carray: (5) => (773) @ (16)
					for (int i_0 = 5; i_0 <= 773; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : input_5_input->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_5_input->array[0]
						// regulate_c_name       : input_5_input_array
						// input_type_conversion : *(int*)&input_5_input->array[i_0]
						if (&(input_5_input->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_5_input_array_tmp_mem;
							input_5_input_array_tmp_mem = *(int*)&input_5_input->array[i_0];
							input_5_input_array_5_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_5_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_input_5_input_array_5, "%s\n", (input_5_input_array_5_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_5_input_array_5, tvin_input_5_input_array_5);
		}

		tcl_file.set_num(49, &tcl_file.input_5_input_array_5_depth);
		sprintf(tvin_input_5_input_array_5, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_5, tvin_input_5_input_array_5);

		// release memory allocation
		delete [] input_5_input_array_5_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_5_input_array_6, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_6, tvin_input_5_input_array_6);

		sc_bv<32>* input_5_input_array_6_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: input_5_input_array_6
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input_5_input.array(31, 0)
				{
					// carray: (6) => (774) @ (16)
					for (int i_0 = 6; i_0 <= 774; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : input_5_input->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_5_input->array[0]
						// regulate_c_name       : input_5_input_array
						// input_type_conversion : *(int*)&input_5_input->array[i_0]
						if (&(input_5_input->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_5_input_array_tmp_mem;
							input_5_input_array_tmp_mem = *(int*)&input_5_input->array[i_0];
							input_5_input_array_6_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_5_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_input_5_input_array_6, "%s\n", (input_5_input_array_6_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_5_input_array_6, tvin_input_5_input_array_6);
		}

		tcl_file.set_num(49, &tcl_file.input_5_input_array_6_depth);
		sprintf(tvin_input_5_input_array_6, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_6, tvin_input_5_input_array_6);

		// release memory allocation
		delete [] input_5_input_array_6_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_5_input_array_7, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_7, tvin_input_5_input_array_7);

		sc_bv<32>* input_5_input_array_7_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: input_5_input_array_7
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input_5_input.array(31, 0)
				{
					// carray: (7) => (775) @ (16)
					for (int i_0 = 7; i_0 <= 775; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : input_5_input->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_5_input->array[0]
						// regulate_c_name       : input_5_input_array
						// input_type_conversion : *(int*)&input_5_input->array[i_0]
						if (&(input_5_input->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_5_input_array_tmp_mem;
							input_5_input_array_tmp_mem = *(int*)&input_5_input->array[i_0];
							input_5_input_array_7_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_5_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_input_5_input_array_7, "%s\n", (input_5_input_array_7_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_5_input_array_7, tvin_input_5_input_array_7);
		}

		tcl_file.set_num(49, &tcl_file.input_5_input_array_7_depth);
		sprintf(tvin_input_5_input_array_7, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_7, tvin_input_5_input_array_7);

		// release memory allocation
		delete [] input_5_input_array_7_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_5_input_array_8, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_8, tvin_input_5_input_array_8);

		sc_bv<32>* input_5_input_array_8_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: input_5_input_array_8
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input_5_input.array(31, 0)
				{
					// carray: (8) => (776) @ (16)
					for (int i_0 = 8; i_0 <= 776; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : input_5_input->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_5_input->array[0]
						// regulate_c_name       : input_5_input_array
						// input_type_conversion : *(int*)&input_5_input->array[i_0]
						if (&(input_5_input->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_5_input_array_tmp_mem;
							input_5_input_array_tmp_mem = *(int*)&input_5_input->array[i_0];
							input_5_input_array_8_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_5_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_input_5_input_array_8, "%s\n", (input_5_input_array_8_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_5_input_array_8, tvin_input_5_input_array_8);
		}

		tcl_file.set_num(49, &tcl_file.input_5_input_array_8_depth);
		sprintf(tvin_input_5_input_array_8, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_8, tvin_input_5_input_array_8);

		// release memory allocation
		delete [] input_5_input_array_8_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_5_input_array_9, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_9, tvin_input_5_input_array_9);

		sc_bv<32>* input_5_input_array_9_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: input_5_input_array_9
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input_5_input.array(31, 0)
				{
					// carray: (9) => (777) @ (16)
					for (int i_0 = 9; i_0 <= 777; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : input_5_input->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_5_input->array[0]
						// regulate_c_name       : input_5_input_array
						// input_type_conversion : *(int*)&input_5_input->array[i_0]
						if (&(input_5_input->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_5_input_array_tmp_mem;
							input_5_input_array_tmp_mem = *(int*)&input_5_input->array[i_0];
							input_5_input_array_9_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_5_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_input_5_input_array_9, "%s\n", (input_5_input_array_9_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_5_input_array_9, tvin_input_5_input_array_9);
		}

		tcl_file.set_num(49, &tcl_file.input_5_input_array_9_depth);
		sprintf(tvin_input_5_input_array_9, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_9, tvin_input_5_input_array_9);

		// release memory allocation
		delete [] input_5_input_array_9_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_5_input_array_10, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_10, tvin_input_5_input_array_10);

		sc_bv<32>* input_5_input_array_10_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: input_5_input_array_10
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input_5_input.array(31, 0)
				{
					// carray: (10) => (778) @ (16)
					for (int i_0 = 10; i_0 <= 778; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : input_5_input->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_5_input->array[0]
						// regulate_c_name       : input_5_input_array
						// input_type_conversion : *(int*)&input_5_input->array[i_0]
						if (&(input_5_input->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_5_input_array_tmp_mem;
							input_5_input_array_tmp_mem = *(int*)&input_5_input->array[i_0];
							input_5_input_array_10_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_5_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_input_5_input_array_10, "%s\n", (input_5_input_array_10_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_5_input_array_10, tvin_input_5_input_array_10);
		}

		tcl_file.set_num(49, &tcl_file.input_5_input_array_10_depth);
		sprintf(tvin_input_5_input_array_10, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_10, tvin_input_5_input_array_10);

		// release memory allocation
		delete [] input_5_input_array_10_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_5_input_array_11, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_11, tvin_input_5_input_array_11);

		sc_bv<32>* input_5_input_array_11_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: input_5_input_array_11
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input_5_input.array(31, 0)
				{
					// carray: (11) => (779) @ (16)
					for (int i_0 = 11; i_0 <= 779; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : input_5_input->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_5_input->array[0]
						// regulate_c_name       : input_5_input_array
						// input_type_conversion : *(int*)&input_5_input->array[i_0]
						if (&(input_5_input->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_5_input_array_tmp_mem;
							input_5_input_array_tmp_mem = *(int*)&input_5_input->array[i_0];
							input_5_input_array_11_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_5_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_input_5_input_array_11, "%s\n", (input_5_input_array_11_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_5_input_array_11, tvin_input_5_input_array_11);
		}

		tcl_file.set_num(49, &tcl_file.input_5_input_array_11_depth);
		sprintf(tvin_input_5_input_array_11, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_11, tvin_input_5_input_array_11);

		// release memory allocation
		delete [] input_5_input_array_11_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_5_input_array_12, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_12, tvin_input_5_input_array_12);

		sc_bv<32>* input_5_input_array_12_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: input_5_input_array_12
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input_5_input.array(31, 0)
				{
					// carray: (12) => (780) @ (16)
					for (int i_0 = 12; i_0 <= 780; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : input_5_input->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_5_input->array[0]
						// regulate_c_name       : input_5_input_array
						// input_type_conversion : *(int*)&input_5_input->array[i_0]
						if (&(input_5_input->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_5_input_array_tmp_mem;
							input_5_input_array_tmp_mem = *(int*)&input_5_input->array[i_0];
							input_5_input_array_12_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_5_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_input_5_input_array_12, "%s\n", (input_5_input_array_12_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_5_input_array_12, tvin_input_5_input_array_12);
		}

		tcl_file.set_num(49, &tcl_file.input_5_input_array_12_depth);
		sprintf(tvin_input_5_input_array_12, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_12, tvin_input_5_input_array_12);

		// release memory allocation
		delete [] input_5_input_array_12_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_5_input_array_13, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_13, tvin_input_5_input_array_13);

		sc_bv<32>* input_5_input_array_13_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: input_5_input_array_13
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input_5_input.array(31, 0)
				{
					// carray: (13) => (781) @ (16)
					for (int i_0 = 13; i_0 <= 781; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : input_5_input->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_5_input->array[0]
						// regulate_c_name       : input_5_input_array
						// input_type_conversion : *(int*)&input_5_input->array[i_0]
						if (&(input_5_input->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_5_input_array_tmp_mem;
							input_5_input_array_tmp_mem = *(int*)&input_5_input->array[i_0];
							input_5_input_array_13_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_5_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_input_5_input_array_13, "%s\n", (input_5_input_array_13_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_5_input_array_13, tvin_input_5_input_array_13);
		}

		tcl_file.set_num(49, &tcl_file.input_5_input_array_13_depth);
		sprintf(tvin_input_5_input_array_13, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_13, tvin_input_5_input_array_13);

		// release memory allocation
		delete [] input_5_input_array_13_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_5_input_array_14, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_14, tvin_input_5_input_array_14);

		sc_bv<32>* input_5_input_array_14_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: input_5_input_array_14
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input_5_input.array(31, 0)
				{
					// carray: (14) => (782) @ (16)
					for (int i_0 = 14; i_0 <= 782; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : input_5_input->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_5_input->array[0]
						// regulate_c_name       : input_5_input_array
						// input_type_conversion : *(int*)&input_5_input->array[i_0]
						if (&(input_5_input->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_5_input_array_tmp_mem;
							input_5_input_array_tmp_mem = *(int*)&input_5_input->array[i_0];
							input_5_input_array_14_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_5_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_input_5_input_array_14, "%s\n", (input_5_input_array_14_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_5_input_array_14, tvin_input_5_input_array_14);
		}

		tcl_file.set_num(49, &tcl_file.input_5_input_array_14_depth);
		sprintf(tvin_input_5_input_array_14, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_14, tvin_input_5_input_array_14);

		// release memory allocation
		delete [] input_5_input_array_14_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_5_input_array_15, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_15, tvin_input_5_input_array_15);

		sc_bv<32>* input_5_input_array_15_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: input_5_input_array_15
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input_5_input.array(31, 0)
				{
					// carray: (15) => (783) @ (16)
					for (int i_0 = 15; i_0 <= 783; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : input_5_input->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_5_input->array[0]
						// regulate_c_name       : input_5_input_array
						// input_type_conversion : *(int*)&input_5_input->array[i_0]
						if (&(input_5_input->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_5_input_array_tmp_mem;
							input_5_input_array_tmp_mem = *(int*)&input_5_input->array[i_0];
							input_5_input_array_15_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_5_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_input_5_input_array_15, "%s\n", (input_5_input_array_15_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_5_input_array_15, tvin_input_5_input_array_15);
		}

		tcl_file.set_num(49, &tcl_file.input_5_input_array_15_depth);
		sprintf(tvin_input_5_input_array_15, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_5_input_array_15, tvin_input_5_input_array_15);

		// release memory allocation
		delete [] input_5_input_array_15_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_5_input_numel, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_5_input_numel, tvin_input_5_input_numel);

		sc_bv<64>* input_5_input_numel_tvin_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: input_5_input_numel
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: input_5_input.numel(63, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : input_5_input->numel
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_5_input->numel
						// regulate_c_name       : input_5_input_numel
						// input_type_conversion : input_5_input->numel
						if (&(input_5_input->numel) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> input_5_input_numel_tmp_mem;
							input_5_input_numel_tmp_mem = input_5_input->numel;
							input_5_input_numel_tvin_wrapc_buffer[hls_map_index].range(63, 0) = input_5_input_numel_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_input_5_input_numel, "%s\n", (input_5_input_numel_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_5_input_numel, tvin_input_5_input_numel);
		}

		tcl_file.set_num(1, &tcl_file.input_5_input_numel_depth);
		sprintf(tvin_input_5_input_numel, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_5_input_numel, tvin_input_5_input_numel);

		// release memory allocation
		delete [] input_5_input_numel_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_8_output_array_0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_0, tvin_dense_8_output_array_0);

		sc_bv<32>* dense_8_output_array_0_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_0
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (0) => (768) @ (16)
					for (int i_0 = 0; i_0 <= 768; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_0_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_dense_8_output_array_0, "%s\n", (dense_8_output_array_0_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_0, tvin_dense_8_output_array_0);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_0_depth);
		sprintf(tvin_dense_8_output_array_0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_0, tvin_dense_8_output_array_0);

		// release memory allocation
		delete [] dense_8_output_array_0_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_8_output_array_1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_1, tvin_dense_8_output_array_1);

		sc_bv<32>* dense_8_output_array_1_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_1
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (1) => (769) @ (16)
					for (int i_0 = 1; i_0 <= 769; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_1_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_dense_8_output_array_1, "%s\n", (dense_8_output_array_1_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_1, tvin_dense_8_output_array_1);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_1_depth);
		sprintf(tvin_dense_8_output_array_1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_1, tvin_dense_8_output_array_1);

		// release memory allocation
		delete [] dense_8_output_array_1_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_8_output_array_2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_2, tvin_dense_8_output_array_2);

		sc_bv<32>* dense_8_output_array_2_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_2
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (2) => (770) @ (16)
					for (int i_0 = 2; i_0 <= 770; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_2_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_dense_8_output_array_2, "%s\n", (dense_8_output_array_2_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_2, tvin_dense_8_output_array_2);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_2_depth);
		sprintf(tvin_dense_8_output_array_2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_2, tvin_dense_8_output_array_2);

		// release memory allocation
		delete [] dense_8_output_array_2_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_8_output_array_3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_3, tvin_dense_8_output_array_3);

		sc_bv<32>* dense_8_output_array_3_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_3
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (3) => (771) @ (16)
					for (int i_0 = 3; i_0 <= 771; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_3_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_dense_8_output_array_3, "%s\n", (dense_8_output_array_3_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_3, tvin_dense_8_output_array_3);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_3_depth);
		sprintf(tvin_dense_8_output_array_3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_3, tvin_dense_8_output_array_3);

		// release memory allocation
		delete [] dense_8_output_array_3_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_8_output_array_4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_4, tvin_dense_8_output_array_4);

		sc_bv<32>* dense_8_output_array_4_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_4
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (4) => (772) @ (16)
					for (int i_0 = 4; i_0 <= 772; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_4_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_dense_8_output_array_4, "%s\n", (dense_8_output_array_4_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_4, tvin_dense_8_output_array_4);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_4_depth);
		sprintf(tvin_dense_8_output_array_4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_4, tvin_dense_8_output_array_4);

		// release memory allocation
		delete [] dense_8_output_array_4_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_8_output_array_5, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_5, tvin_dense_8_output_array_5);

		sc_bv<32>* dense_8_output_array_5_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_5
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (5) => (773) @ (16)
					for (int i_0 = 5; i_0 <= 773; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_5_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_dense_8_output_array_5, "%s\n", (dense_8_output_array_5_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_5, tvin_dense_8_output_array_5);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_5_depth);
		sprintf(tvin_dense_8_output_array_5, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_5, tvin_dense_8_output_array_5);

		// release memory allocation
		delete [] dense_8_output_array_5_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_8_output_array_6, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_6, tvin_dense_8_output_array_6);

		sc_bv<32>* dense_8_output_array_6_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_6
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (6) => (774) @ (16)
					for (int i_0 = 6; i_0 <= 774; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_6_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_dense_8_output_array_6, "%s\n", (dense_8_output_array_6_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_6, tvin_dense_8_output_array_6);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_6_depth);
		sprintf(tvin_dense_8_output_array_6, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_6, tvin_dense_8_output_array_6);

		// release memory allocation
		delete [] dense_8_output_array_6_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_8_output_array_7, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_7, tvin_dense_8_output_array_7);

		sc_bv<32>* dense_8_output_array_7_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_7
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (7) => (775) @ (16)
					for (int i_0 = 7; i_0 <= 775; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_7_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_dense_8_output_array_7, "%s\n", (dense_8_output_array_7_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_7, tvin_dense_8_output_array_7);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_7_depth);
		sprintf(tvin_dense_8_output_array_7, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_7, tvin_dense_8_output_array_7);

		// release memory allocation
		delete [] dense_8_output_array_7_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_8_output_array_8, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_8, tvin_dense_8_output_array_8);

		sc_bv<32>* dense_8_output_array_8_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_8
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (8) => (776) @ (16)
					for (int i_0 = 8; i_0 <= 776; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_8_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_dense_8_output_array_8, "%s\n", (dense_8_output_array_8_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_8, tvin_dense_8_output_array_8);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_8_depth);
		sprintf(tvin_dense_8_output_array_8, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_8, tvin_dense_8_output_array_8);

		// release memory allocation
		delete [] dense_8_output_array_8_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_8_output_array_9, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_9, tvin_dense_8_output_array_9);

		sc_bv<32>* dense_8_output_array_9_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_9
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (9) => (777) @ (16)
					for (int i_0 = 9; i_0 <= 777; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_9_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_dense_8_output_array_9, "%s\n", (dense_8_output_array_9_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_9, tvin_dense_8_output_array_9);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_9_depth);
		sprintf(tvin_dense_8_output_array_9, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_9, tvin_dense_8_output_array_9);

		// release memory allocation
		delete [] dense_8_output_array_9_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_8_output_array_10, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_10, tvin_dense_8_output_array_10);

		sc_bv<32>* dense_8_output_array_10_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_10
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (10) => (778) @ (16)
					for (int i_0 = 10; i_0 <= 778; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_10_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_dense_8_output_array_10, "%s\n", (dense_8_output_array_10_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_10, tvin_dense_8_output_array_10);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_10_depth);
		sprintf(tvin_dense_8_output_array_10, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_10, tvin_dense_8_output_array_10);

		// release memory allocation
		delete [] dense_8_output_array_10_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_8_output_array_11, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_11, tvin_dense_8_output_array_11);

		sc_bv<32>* dense_8_output_array_11_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_11
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (11) => (779) @ (16)
					for (int i_0 = 11; i_0 <= 779; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_11_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_dense_8_output_array_11, "%s\n", (dense_8_output_array_11_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_11, tvin_dense_8_output_array_11);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_11_depth);
		sprintf(tvin_dense_8_output_array_11, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_11, tvin_dense_8_output_array_11);

		// release memory allocation
		delete [] dense_8_output_array_11_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_8_output_array_12, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_12, tvin_dense_8_output_array_12);

		sc_bv<32>* dense_8_output_array_12_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_12
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (12) => (780) @ (16)
					for (int i_0 = 12; i_0 <= 780; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_12_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_dense_8_output_array_12, "%s\n", (dense_8_output_array_12_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_12, tvin_dense_8_output_array_12);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_12_depth);
		sprintf(tvin_dense_8_output_array_12, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_12, tvin_dense_8_output_array_12);

		// release memory allocation
		delete [] dense_8_output_array_12_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_8_output_array_13, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_13, tvin_dense_8_output_array_13);

		sc_bv<32>* dense_8_output_array_13_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_13
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (13) => (781) @ (16)
					for (int i_0 = 13; i_0 <= 781; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_13_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_dense_8_output_array_13, "%s\n", (dense_8_output_array_13_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_13, tvin_dense_8_output_array_13);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_13_depth);
		sprintf(tvin_dense_8_output_array_13, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_13, tvin_dense_8_output_array_13);

		// release memory allocation
		delete [] dense_8_output_array_13_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_8_output_array_14, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_14, tvin_dense_8_output_array_14);

		sc_bv<32>* dense_8_output_array_14_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_14
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (14) => (782) @ (16)
					for (int i_0 = 14; i_0 <= 782; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_14_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_dense_8_output_array_14, "%s\n", (dense_8_output_array_14_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_14, tvin_dense_8_output_array_14);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_14_depth);
		sprintf(tvin_dense_8_output_array_14, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_14, tvin_dense_8_output_array_14);

		// release memory allocation
		delete [] dense_8_output_array_14_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_8_output_array_15, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_15, tvin_dense_8_output_array_15);

		sc_bv<32>* dense_8_output_array_15_tvin_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_15
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (15) => (783) @ (16)
					for (int i_0 = 15; i_0 <= 783; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_15_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvin_dense_8_output_array_15, "%s\n", (dense_8_output_array_15_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_15, tvin_dense_8_output_array_15);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_15_depth);
		sprintf(tvin_dense_8_output_array_15, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_8_output_array_15, tvin_dense_8_output_array_15);

		// release memory allocation
		delete [] dense_8_output_array_15_tvin_wrapc_buffer;

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		c_mnist(input_5_input, dense_8_output);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_dense_8_output_array_0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_0, tvout_dense_8_output_array_0);

		sc_bv<32>* dense_8_output_array_0_tvout_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_0
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (0) => (768) @ (16)
					for (int i_0 = 0; i_0 <= 768; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_0_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvout_dense_8_output_array_0, "%s\n", (dense_8_output_array_0_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_0, tvout_dense_8_output_array_0);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_0_depth);
		sprintf(tvout_dense_8_output_array_0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_0, tvout_dense_8_output_array_0);

		// release memory allocation
		delete [] dense_8_output_array_0_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_dense_8_output_array_1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_1, tvout_dense_8_output_array_1);

		sc_bv<32>* dense_8_output_array_1_tvout_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_1
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (1) => (769) @ (16)
					for (int i_0 = 1; i_0 <= 769; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_1_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvout_dense_8_output_array_1, "%s\n", (dense_8_output_array_1_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_1, tvout_dense_8_output_array_1);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_1_depth);
		sprintf(tvout_dense_8_output_array_1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_1, tvout_dense_8_output_array_1);

		// release memory allocation
		delete [] dense_8_output_array_1_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_dense_8_output_array_2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_2, tvout_dense_8_output_array_2);

		sc_bv<32>* dense_8_output_array_2_tvout_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_2
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (2) => (770) @ (16)
					for (int i_0 = 2; i_0 <= 770; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_2_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvout_dense_8_output_array_2, "%s\n", (dense_8_output_array_2_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_2, tvout_dense_8_output_array_2);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_2_depth);
		sprintf(tvout_dense_8_output_array_2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_2, tvout_dense_8_output_array_2);

		// release memory allocation
		delete [] dense_8_output_array_2_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_dense_8_output_array_3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_3, tvout_dense_8_output_array_3);

		sc_bv<32>* dense_8_output_array_3_tvout_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_3
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (3) => (771) @ (16)
					for (int i_0 = 3; i_0 <= 771; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_3_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvout_dense_8_output_array_3, "%s\n", (dense_8_output_array_3_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_3, tvout_dense_8_output_array_3);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_3_depth);
		sprintf(tvout_dense_8_output_array_3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_3, tvout_dense_8_output_array_3);

		// release memory allocation
		delete [] dense_8_output_array_3_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_dense_8_output_array_4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_4, tvout_dense_8_output_array_4);

		sc_bv<32>* dense_8_output_array_4_tvout_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_4
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (4) => (772) @ (16)
					for (int i_0 = 4; i_0 <= 772; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_4_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvout_dense_8_output_array_4, "%s\n", (dense_8_output_array_4_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_4, tvout_dense_8_output_array_4);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_4_depth);
		sprintf(tvout_dense_8_output_array_4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_4, tvout_dense_8_output_array_4);

		// release memory allocation
		delete [] dense_8_output_array_4_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_dense_8_output_array_5, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_5, tvout_dense_8_output_array_5);

		sc_bv<32>* dense_8_output_array_5_tvout_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_5
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (5) => (773) @ (16)
					for (int i_0 = 5; i_0 <= 773; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_5_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvout_dense_8_output_array_5, "%s\n", (dense_8_output_array_5_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_5, tvout_dense_8_output_array_5);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_5_depth);
		sprintf(tvout_dense_8_output_array_5, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_5, tvout_dense_8_output_array_5);

		// release memory allocation
		delete [] dense_8_output_array_5_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_dense_8_output_array_6, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_6, tvout_dense_8_output_array_6);

		sc_bv<32>* dense_8_output_array_6_tvout_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_6
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (6) => (774) @ (16)
					for (int i_0 = 6; i_0 <= 774; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_6_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvout_dense_8_output_array_6, "%s\n", (dense_8_output_array_6_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_6, tvout_dense_8_output_array_6);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_6_depth);
		sprintf(tvout_dense_8_output_array_6, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_6, tvout_dense_8_output_array_6);

		// release memory allocation
		delete [] dense_8_output_array_6_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_dense_8_output_array_7, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_7, tvout_dense_8_output_array_7);

		sc_bv<32>* dense_8_output_array_7_tvout_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_7
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (7) => (775) @ (16)
					for (int i_0 = 7; i_0 <= 775; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_7_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvout_dense_8_output_array_7, "%s\n", (dense_8_output_array_7_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_7, tvout_dense_8_output_array_7);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_7_depth);
		sprintf(tvout_dense_8_output_array_7, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_7, tvout_dense_8_output_array_7);

		// release memory allocation
		delete [] dense_8_output_array_7_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_dense_8_output_array_8, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_8, tvout_dense_8_output_array_8);

		sc_bv<32>* dense_8_output_array_8_tvout_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_8
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (8) => (776) @ (16)
					for (int i_0 = 8; i_0 <= 776; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_8_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvout_dense_8_output_array_8, "%s\n", (dense_8_output_array_8_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_8, tvout_dense_8_output_array_8);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_8_depth);
		sprintf(tvout_dense_8_output_array_8, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_8, tvout_dense_8_output_array_8);

		// release memory allocation
		delete [] dense_8_output_array_8_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_dense_8_output_array_9, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_9, tvout_dense_8_output_array_9);

		sc_bv<32>* dense_8_output_array_9_tvout_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_9
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (9) => (777) @ (16)
					for (int i_0 = 9; i_0 <= 777; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_9_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvout_dense_8_output_array_9, "%s\n", (dense_8_output_array_9_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_9, tvout_dense_8_output_array_9);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_9_depth);
		sprintf(tvout_dense_8_output_array_9, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_9, tvout_dense_8_output_array_9);

		// release memory allocation
		delete [] dense_8_output_array_9_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_dense_8_output_array_10, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_10, tvout_dense_8_output_array_10);

		sc_bv<32>* dense_8_output_array_10_tvout_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_10
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (10) => (778) @ (16)
					for (int i_0 = 10; i_0 <= 778; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_10_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvout_dense_8_output_array_10, "%s\n", (dense_8_output_array_10_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_10, tvout_dense_8_output_array_10);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_10_depth);
		sprintf(tvout_dense_8_output_array_10, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_10, tvout_dense_8_output_array_10);

		// release memory allocation
		delete [] dense_8_output_array_10_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_dense_8_output_array_11, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_11, tvout_dense_8_output_array_11);

		sc_bv<32>* dense_8_output_array_11_tvout_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_11
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (11) => (779) @ (16)
					for (int i_0 = 11; i_0 <= 779; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_11_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvout_dense_8_output_array_11, "%s\n", (dense_8_output_array_11_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_11, tvout_dense_8_output_array_11);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_11_depth);
		sprintf(tvout_dense_8_output_array_11, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_11, tvout_dense_8_output_array_11);

		// release memory allocation
		delete [] dense_8_output_array_11_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_dense_8_output_array_12, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_12, tvout_dense_8_output_array_12);

		sc_bv<32>* dense_8_output_array_12_tvout_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_12
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (12) => (780) @ (16)
					for (int i_0 = 12; i_0 <= 780; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_12_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvout_dense_8_output_array_12, "%s\n", (dense_8_output_array_12_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_12, tvout_dense_8_output_array_12);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_12_depth);
		sprintf(tvout_dense_8_output_array_12, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_12, tvout_dense_8_output_array_12);

		// release memory allocation
		delete [] dense_8_output_array_12_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_dense_8_output_array_13, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_13, tvout_dense_8_output_array_13);

		sc_bv<32>* dense_8_output_array_13_tvout_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_13
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (13) => (781) @ (16)
					for (int i_0 = 13; i_0 <= 781; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_13_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvout_dense_8_output_array_13, "%s\n", (dense_8_output_array_13_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_13, tvout_dense_8_output_array_13);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_13_depth);
		sprintf(tvout_dense_8_output_array_13, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_13, tvout_dense_8_output_array_13);

		// release memory allocation
		delete [] dense_8_output_array_13_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_dense_8_output_array_14, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_14, tvout_dense_8_output_array_14);

		sc_bv<32>* dense_8_output_array_14_tvout_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_14
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (14) => (782) @ (16)
					for (int i_0 = 14; i_0 <= 782; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_14_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvout_dense_8_output_array_14, "%s\n", (dense_8_output_array_14_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_14, tvout_dense_8_output_array_14);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_14_depth);
		sprintf(tvout_dense_8_output_array_14, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_14, tvout_dense_8_output_array_14);

		// release memory allocation
		delete [] dense_8_output_array_14_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_dense_8_output_array_15, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_15, tvout_dense_8_output_array_15);

		sc_bv<32>* dense_8_output_array_15_tvout_wrapc_buffer = new sc_bv<32>[49];

		// RTL Name: dense_8_output_array_15
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_8_output.array(31, 0)
				{
					// carray: (15) => (783) @ (16)
					for (int i_0 = 15; i_0 <= 783; i_0 += 16)
					{
						// sub                   : i_0
						// ori_name              : dense_8_output->array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_8_output->array[0]
						// regulate_c_name       : dense_8_output_array
						// input_type_conversion : *(int*)&dense_8_output->array[i_0]
						if (&(dense_8_output->array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_8_output_array_tmp_mem;
							dense_8_output_array_tmp_mem = *(int*)&dense_8_output->array[i_0];
							dense_8_output_array_15_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dense_8_output_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 49; i++)
		{
			sprintf(tvout_dense_8_output_array_15, "%s\n", (dense_8_output_array_15_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_15, tvout_dense_8_output_array_15);
		}

		tcl_file.set_num(49, &tcl_file.dense_8_output_array_15_depth);
		sprintf(tvout_dense_8_output_array_15, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dense_8_output_array_15, tvout_dense_8_output_array_15);

		// release memory allocation
		delete [] dense_8_output_array_15_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "input_5_input_array_0"
		delete [] tvin_input_5_input_array_0;
		// release memory allocation: "input_5_input_array_1"
		delete [] tvin_input_5_input_array_1;
		// release memory allocation: "input_5_input_array_2"
		delete [] tvin_input_5_input_array_2;
		// release memory allocation: "input_5_input_array_3"
		delete [] tvin_input_5_input_array_3;
		// release memory allocation: "input_5_input_array_4"
		delete [] tvin_input_5_input_array_4;
		// release memory allocation: "input_5_input_array_5"
		delete [] tvin_input_5_input_array_5;
		// release memory allocation: "input_5_input_array_6"
		delete [] tvin_input_5_input_array_6;
		// release memory allocation: "input_5_input_array_7"
		delete [] tvin_input_5_input_array_7;
		// release memory allocation: "input_5_input_array_8"
		delete [] tvin_input_5_input_array_8;
		// release memory allocation: "input_5_input_array_9"
		delete [] tvin_input_5_input_array_9;
		// release memory allocation: "input_5_input_array_10"
		delete [] tvin_input_5_input_array_10;
		// release memory allocation: "input_5_input_array_11"
		delete [] tvin_input_5_input_array_11;
		// release memory allocation: "input_5_input_array_12"
		delete [] tvin_input_5_input_array_12;
		// release memory allocation: "input_5_input_array_13"
		delete [] tvin_input_5_input_array_13;
		// release memory allocation: "input_5_input_array_14"
		delete [] tvin_input_5_input_array_14;
		// release memory allocation: "input_5_input_array_15"
		delete [] tvin_input_5_input_array_15;
		// release memory allocation: "input_5_input_numel"
		delete [] tvin_input_5_input_numel;
		// release memory allocation: "dense_8_output_array_0"
		delete [] tvin_dense_8_output_array_0;
		delete [] tvout_dense_8_output_array_0;
		// release memory allocation: "dense_8_output_array_1"
		delete [] tvin_dense_8_output_array_1;
		delete [] tvout_dense_8_output_array_1;
		// release memory allocation: "dense_8_output_array_2"
		delete [] tvin_dense_8_output_array_2;
		delete [] tvout_dense_8_output_array_2;
		// release memory allocation: "dense_8_output_array_3"
		delete [] tvin_dense_8_output_array_3;
		delete [] tvout_dense_8_output_array_3;
		// release memory allocation: "dense_8_output_array_4"
		delete [] tvin_dense_8_output_array_4;
		delete [] tvout_dense_8_output_array_4;
		// release memory allocation: "dense_8_output_array_5"
		delete [] tvin_dense_8_output_array_5;
		delete [] tvout_dense_8_output_array_5;
		// release memory allocation: "dense_8_output_array_6"
		delete [] tvin_dense_8_output_array_6;
		delete [] tvout_dense_8_output_array_6;
		// release memory allocation: "dense_8_output_array_7"
		delete [] tvin_dense_8_output_array_7;
		delete [] tvout_dense_8_output_array_7;
		// release memory allocation: "dense_8_output_array_8"
		delete [] tvin_dense_8_output_array_8;
		delete [] tvout_dense_8_output_array_8;
		// release memory allocation: "dense_8_output_array_9"
		delete [] tvin_dense_8_output_array_9;
		delete [] tvout_dense_8_output_array_9;
		// release memory allocation: "dense_8_output_array_10"
		delete [] tvin_dense_8_output_array_10;
		delete [] tvout_dense_8_output_array_10;
		// release memory allocation: "dense_8_output_array_11"
		delete [] tvin_dense_8_output_array_11;
		delete [] tvout_dense_8_output_array_11;
		// release memory allocation: "dense_8_output_array_12"
		delete [] tvin_dense_8_output_array_12;
		delete [] tvout_dense_8_output_array_12;
		// release memory allocation: "dense_8_output_array_13"
		delete [] tvin_dense_8_output_array_13;
		delete [] tvout_dense_8_output_array_13;
		// release memory allocation: "dense_8_output_array_14"
		delete [] tvin_dense_8_output_array_14;
		delete [] tvout_dense_8_output_array_14;
		// release memory allocation: "dense_8_output_array_15"
		delete [] tvin_dense_8_output_array_15;
		delete [] tvout_dense_8_output_array_15;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

